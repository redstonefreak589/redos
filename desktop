--Variables (For random stuff)

local termWidth, termHeight = term.getSize()
local selectedItem = 1
local running = true
local inMainMenu = true
local inRednetMenu = false
local inSettingsMenu = false
local inProgramsMenu = false
local modemStatus = false
local modemSide = "top"

--Menu Methods

function programs()
	inProgramsMenu = true
	selectedItem = 1
	while inProgramsMenu do
		term.clear()
		resetScreen()
		term.setCursorPos(1,3)
		printMenu(programsMenu)
		event, key = os.pullEvent("key")
		onKeyPressed(key, programsMenu)
	end
	return true
end

function Settings()
	inSettingsMenu = true
	selectedItem = 1
	while inSettingsMenu do
		term.clear()
		resetScreen()
		term.setCursorPos(1,3)
		printMenu(settingsMenu)
		event, key = os.pullEvent("key")
		onKeyPressed(key, settingsMenu)
	end
	return true
end

function rednetMenu()
	inRednetMenu = true
	selectedItem = 1
	while inRednetMenu do
		term.clear()
		resetScreen()
		term.setCursorPos(1,3)
		printMenu(rednetMenu)
		event, key = os.pullEvent("key")
		onKeyPressed(key, rednetMenu)
	end
	return true
end

function Exit()
	term.clear()
	resetScreen()
	centerPrint("Goodbye!", 3)
	sleep(2)
	term.clear()
	inMainMenu = false
	return true
end

function changeUser()
	term.clear()
	resetScreen()
	printY("New Username: ", 3)
	newUser = read()
	h = fs.open(".redos/login/user", "w")
	h.write(newUser)
	h.close()
	selectedItem = 1
	inSettingsMenu = false
	return true
end

function explorer()
	term.clear()
	resetScreen()
	shell.run(".redos/programs/Browser")
	term.clear()
	resetScreen()
	return true
end

function back()
	term.clear()
	resetScreen()
	inSettingsMenu = false
	inProgramsMenu = false
	inRednetMenu = false
	inMainMenu = true
	selectedItem = 1
	return true
end

function changePass()
	term.clear()
	resetScreen()
	printY("New Password: ", 3)
	newPass = read("*")
	term.setCursorPos(1,3)
	term.clearLine()
	printY("Confirm Password: ", 3)
	confPass = read("*")
	if confPass == newPass then
		h = fs.open(".redos/login/pass", "w")
		h.write(newPass)
		h.close()
	else
		term.setCursorPos(1,3)
		term.clearLine()
		printY("Passwords didn't match. Try again", 3)
		sleep(2)
		changePass()
	end
	selectedItem = 1
	inSettingsMenu = false
	return true
end

function shellRun()
	term.clear()
	resetScreen()
	centerPrint("Not yet implemented!", 3)
	sleep(2)
	selectedItem = 1
	return true
end

function resetScreen2()
	local w, h = term.getSize()
	for i = 1, h do
		term.setCursorPos(1, h)
		term.clearLine()
	end
	centerPrint("RedOS Desktop", 1)
	return true
end

function writeY(text, yLoc)
	term.setCursorPos(1, yLoc)
	write(text)
	return true
end

function changeMSide()
	resetScreen()
	term.setCursorPos(1,3)
	term.clearLine()
	term.setCursorPos(1,4)
	term.clearLine()
	term.setCursorPos(1,5)
	term.clearLine()
	printY("Type in the side you wish to change the modem to", 3)
	writeY("> ", 4)
	input = read()
	if input == "top" or input == "bottom" or input == "left" or input == "right" or input == "front" or input == "back" then
		modemSide = input
	else
		resetScreen()
		term.setCursorPos(1,3)
		term.clearLine()
		term.setCursorPos(1,4)
		term.clearLine()
		term.setCursorPos(1,5)
		printY("Invalid side!", 3)
		sleep(2)
		changeMSide()
	end
	selectedItem = 1
	return true
end

function toggleMStatus()
	if modemStatus == false then
		resetScreen()
		term.setCursorPos(1,3)
		term.clearLine()
		term.setCursorPos(1,4)
		term.clearLine()
		term.setCursorPos(1,5)
		term.clearLine()
		if peripheral.isPresent(modemSide) and peripheral.getType(modemSide) == "modem" then
			printY("Toggling modem ON", 3)
			modemStatus = true
			rednet.open(modemSide)
			sleep(2)
		else
			printY("No modem on that side! Try placing one :P", 3)
			sleep(2)
		end
	elseif modemStatus == true then
		resetScreen()
		term.setCursorPos(1,3)
		term.clearLine()
		term.setCursorPos(1,4)
		term.clearLine()
		term.setCursorPos(1,5)
		term.clearLine()
		if peripheral.isPresent(modemSide) and peripheral.getType(modemSide) == "modem" then
			printY("Toggling modem OFF", 3)
			modemStatus = false
			rednet.close(modemSide)
			sleep(2)
		else
			printY("No modem on that side! Try placing one :P", 3)
			sleep(2)
		end
	else
		resetScreen()
		term.setCursorPos(1,3)
		term.clearLine()
		term.setCursorPos(1,4)
		term.clearLine()
		term.setCursorPos(1,5)
		term.clearLine()
		printY("The variable 'modemStatus' has been tampered with! Defaulting to 'OFF'", 3)
		modemStatus = false
		rednet.close(modemSide)
		sleep(2)
	end
	selectedItem = 1
	return true
end

programsMenu = {
	[1] = {text = "File Browser", handler =  explorer},
	[2] = {text = "Shell", handler = shellRun},
	[3] = {text = "Back", handler = back}
}

mainMenu = {
	[1] = {text = "Programs", handler = programs},
	[2] = {text = "Settings", handler = Settings },
	[3] = {text = "Rednet", handler = rednetMenu },
	[4] = {text = "Exit RedOS", handler = Exit}
}

settingsMenu = {
	[1] = {text = "Change Username", handler = changeUser },
	[2] = {text = "Change Password", handler = changePass },
	[3] = {text = "Back", handler = back }
}

rednetMenu = {
	[1] = {text = "Change Side", handler = changeMSide },
	[2] = {text = "Toggle On/Off", handler = toggleMStatus },
	[3] = {text = "Back", handler = back }
}

function printMenu(menu)
	for i = 1,#menu do
		if i == selectedItem then
			print("> "..menu[i].text)
		else
			print("  "..menu[i].text)
		end
	end
	return true
end

function onItemSelected(menu)
	menu[selectedItem].handler()
	return true
end

function onKeyPressed(key, menu)
	if key == keys.enter then
		 onItemSelected(menu)
	elseif key == keys.up then
		if selectedItem > 1 then
			selectedItem = selectedItem - 1
		end
	elseif key == keys.down then
		if selectedItem < #menu then
			selectedItem = selectedItem + 1
		end
	end
	return true
end

--Main Method

function main()
	if fs.exists("fix") then
	else
		for i = 1, 3 do
			local response = http.get("https://raw.github.com/redstonefreak589/redos/master/fix")
			if response then
				local data = response.readAll()
				local f = io.open("fix", "w")
				f:write(data)
				f:close()
			end
		end
	end
	while inMainMenu do
		term.clear()
		resetScreen()
		term.setCursorPos(1,3)
		printMenu(mainMenu)
		
		event, key = os.pullEvent("key")
		onKeyPressed(key, mainMenu)
	end
	return true
end

--Functions
function setColors(backColor, textColor)
	term.setBackgroundColor(backColor)
	term.setTextColor(textColor)
	return true
end

function centerPrint(text, yPos)
  w, h = term.getSize()
  term.setCursorPos(math.floor(w-text:len())/2, yPos)
  print(text)
  return true
end

function printY(text, yLoc2)
	term.setCursorPos(1, yLoc2)
	write(text)
	return true
end

function resetScreen()
	paintutils.drawLine(1, 2, w, 2, colors.blue)
	setColors(colors.white, colors.cyan)
	centerPrint("RedOS Desktop", 1)
	return true
end

local w, h = term.getSize()
resetScreen()
main()
setColors(colors.black, colors.white)
term.setCursorPos(1,1)
term.clear()
fs.move("startup", "startup.temp")
fs.move("fix", "startup")
os.reboot()